@using Microsoft.IdentityModel.Tokens
@model Tuple<List<Todo>, List<Todo>>

@{
    ViewData["Title"] = "Todos";
}

<div>
    <h1 class="my-2 text-center">Todo list</h1>
    <div>
        <div class="d-flex justify-content-end">
            <a href="/todo/create" class="btn btn-outline-success">Create todo</a>
        </div>
        <div class="mt-5">
            @{
                if (!Model.Item1.IsNullOrEmpty())
                {
                    foreach (var todo in Model.Item1)
                    {
                        <div class="my-3 mx-1 col">
                            <div class="card">
                                <div class="card-body">
                                    <h5 class="card-title">@todo.Title</h5>
                                    <p class="card-text">Priority: @todo.Priority</p>
                                    @if (todo.DueDate.HasValue)
                                    {
                                        <p class="card-text">Due Date: @todo.DueDate.Value.ToShortDateString()</p>
                                    }
                                    <div class="form-check">
                                        <form id="formToogleTodoCompleted-@todo.TodoId" asp-action="ToogleTodoCompleted" asp-controller="Todo" method="post">
                                            <input class="form-check-input" type="checkbox" id="todo-@todo.TodoId" name="IsCompleted" value="@((!todo.IsCompleted).ToString().ToLower())" checked="@(todo.IsCompleted)" onclick="handleToogleTodoCompleted(@todo.TodoId)"/>
                                            <input type="hidden" name="TodoId" value="@todo.TodoId"/>
                                        </form>
                                        <label class="form-check-label" for="todo-@todo.TodoId">
                                            Completed
                                        </label>
                                    </div>
                                    <div class="mt-2">
                                        @{
                                            if (!todo.Categories.IsNullOrEmpty())
                                            {
                                                foreach (var category in todo.Categories.ToList())
                                                {
                                                    <button class="btn btn-outline-info">@category.Name</button>
                                                }
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                    <hr class="mt-5"/>
                    <h3 class="mt-5">Todo completion</h3>
                    <div class="my-4">
                        @{
                            foreach (var todo in Model.Item2)
                            {
                                <div class="my-3 mx-1 col">
                                    <div class="card bg-dark text-white">
                                        <div class="card-body">
                                            <h5 class="card-title">@todo.Title</h5>
                                            <p class="card-text">Priority: @todo.Priority</p>
                                            @if (todo.DueDate.HasValue)
                                            {
                                                <p class="card-text">Due Date: @todo.DueDate.Value.ToShortDateString()</p>
                                            }
                                            <div class="form-check">
                                                <form id="formToogleTodoCompleted-@todo.TodoId" asp-action="ToogleTodoCompleted" asp-controller="Todo" method="post">
                                                    <input class="form-check-input" type="checkbox" id="todo-@todo.TodoId" name="IsCompleted" value="@((!todo.IsCompleted).ToString().ToLower())" checked="@(todo.IsCompleted)" onclick="handleToogleTodoCompleted(@todo.TodoId)"/>
                                                    <input type="hidden" name="TodoId" value="@todo.TodoId"/>
                                                </form>
                                                <label class="form-check-label" for="todo-@todo.TodoId">
                                                    Completed
                                                </label>
                                            </div>
                                            <div class="mt-2">
                                                @{
                                                    if (!todo.Categories.IsNullOrEmpty())
                                                    {
                                                        foreach (var category in todo.Categories.ToList())
                                                        {
                                                            <button class="btn btn-outline-info">@category.Name</button>
                                                        }
                                                    }
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                }
                else
                {
                    <h3>No task has been created yet!</h3>
                }
            }
        </div>
    </div>
</div>